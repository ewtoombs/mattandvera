#!/usr/bin/env python

from sys import *
import socketserver as ss
import subprocess as sp
from threading import Thread
from queue import Queue
from time import time

readsize = 1024

# Audio delay, in bytes. Flac is around 80 KiB/s.
rate = 80*1024
delay = rate*5

class ClientDisconnected(Exception):
    pass
class MattHandler(ss.StreamRequestHandler):
    def handle(self):
        stderr.write('Client has connected.\n')
        try:
            p = sp.Popen('gst-launch-1.0 filesrc location=/dev/stdin ! '
                'queue max-size-bytes={} max-size-buffers=0 max-size-time=0 '
                'leaky=downstream ! decodebin ! autoaudiosink '
                'sync=false'.format(delay).split(), stdin=sp.PIPE)
            while True:
                try:
                    data = self.rfile.read(readsize)
                except BrokenPipeError:
                    raise ClientDisconnected()
                except ConnectionResetError:
                    raise ClientDisconnected()
                if len(data) == 0:
                    raise ClientDisconnected()
                p.stdin.write(data)
        except KeyboardInterrupt:
            pass
        except ClientDisconnected:
            stderr.write('Client has disconnected.\n')
        p.stdin.close()
        # The previous call is enough to stop the command, but it will be a 
        # zombie until after the exit code is read. This is what this last 
        # p.wait() call is for. DIE ZOMBIES!!
        p.wait()

# Create the server.
server = ss.TCPServer(('', 4444), MattHandler)

# Activate the server; this will keep running until you
# interrupt the program with Ctrl-C
server.serve_forever()
